{"version":3,"sources":["assistant.tsx","pages/tab1.tsx","pages/tab2.tsx","store.ts","App.tsx","reportWebVitals.ts","GlobalStyle.tsx","index.tsx"],"names":["assistant","assistantState","initAssistant","dispatch","getState","createAssistant","on","navigation","action","command","window","scrollTo","scrollY","console","log","sendData","data","Tab1","size","Button","text","view","onClick","action_id","parameters","tab","type","Tab2","contentRight","file","reducer","state","currentTab","App","memo","useReducer","appState","useEffect","className","Tabs","stretch","pilled","scaleOnPress","outlined","disabled","key","isActive","tabIndex","contentLeft","onFocus","onBlur","route","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","DocumentStyle","createGlobalStyle","background","gradient","ThemeStyle","darkSber","GlobalStyle","ReactDOM","render","Device","document","getElementById"],"mappings":"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","file":"static/js/main.ff6d86ae.chunk.js","sourcesContent":["import { createSmartappDebugger, createAssistant, AssistantAppState } from '@sberdevices/assistant-client';\nlet assistant:any;\nlet assistantState = {};\n\nconst initializeAssistant = (getState: any) => {\n    if (process.env.NODE_ENV === 'development' && window.Cypress == null) {\n        return createSmartappDebugger({\n            token: process.env.REACT_APP_TOKEN ?? '',\n            initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n            getState,\n        });\n    }\n\n    return createAssistant({ getState });\n};\n\nexport const initAssistant = (dispatch: any) => {\n    assistant = initializeAssistant(() => assistantState);\n\n    assistant.on('data', ({ navigation, action }: any) => {\n        if (navigation) {\n            switch (navigation.command) {\n                case 'UP':\n                    window.scrollTo(0, window.scrollY - 500);\n                    break;\n                case 'DOWN':\n                    window.scrollTo(0, window.scrollY + 500);\n                    break;\n            }\n        }\n\n        console.log('action', action);\n        if (action) {\n            dispatch(action);\n        }\n    });\n\n    return assistant;\n}\n\nexport const sendData = (data:any) => {\n    assistant.sendData(data);\n}\n","import React from 'react';\nimport { Button } from '@sberdevices/plasma-ui/components/Button/Button';\nimport { Container, Row, Col }  from '@sberdevices/plasma-ui';\nimport { sendData } from '../assistant';\n\nexport const Tab1 = ({ dispatch }: any) => {\n    const click = () => () => {\n        sendData({ action: { action_id: 'CLICK' } });\n    };\n\n    const click2 = () => () => {\n        sendData({ action: { action_id: 'SELECT', parameters: { tab: 1 } } });\n    };\n\n    const click3 = () => () => {\n        dispatch({type: 'SELECT', tab: 1});\n    };\n\n    return (\n        <Container>\n            <Row>\n                <Col size={4}>\n                    <Button text=\"Текст\" view=\"primary\" size=\"s\" onClick={click()} />\n                </Col>\n                <Col size={4}>\n                    <Button text=\"Переключить вкладку через бэк\" view=\"primary\" size=\"s\" onClick={click2()} />\n                </Col>\n            </Row>\n            <Row>\n                <Col size={4}>\n                    <Button text=\"Переключить вкладку не через бэк\" view=\"primary\" size=\"s\" onClick={click3()} />\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n","import React from 'react';\nimport { Button } from '@sberdevices/plasma-ui/components/Button/Button';\nimport { IconDownload } from '@sberdevices/plasma-icons';\nimport { sendData } from '../assistant';\n\nexport const Tab2 = () => {\n    const click = () => () => {\n        sendData({ action: { action_id: 'DOWNLOAD', parameters: { file: 'text.txt' } } });\n    };\n    return (\n        <Button text=\"Скачать\" view=\"primary\" contentRight={<IconDownload />} size=\"s\" onClick={click()} />\n    )\n}\n","type State = {\n    currentTab: number;\n};\n\ntype Action =\n    | {\n          type: 'START';\n      }\n    | {\n          type: 'SELECT';\n          tab: number;\n      };\n\nexport const reducer = (state: State, action: Action) => {\n    console.log(action);\n    switch (action.type) {\n        case 'START':\n            return {\n                ...state,\n            };\n\n        case 'SELECT':\n            return {\n                ...state,\n                currentTab: action.tab\n            };\n\n        default:\n            return {...state}\n    }\n};\n","import React, { FC, memo, useReducer, useEffect } from 'react';\nimport { Tabs, TabItem } from '@sberdevices/plasma-ui/components/Tabs/Tabs';\nimport { Container, Row, Col }  from '@sberdevices/plasma-ui';\nimport './App.css';\nimport { Tab1 } from './pages/tab1';\nimport { Tab2 } from './pages/tab2';\nimport { reducer } from './store';\nimport { initAssistant } from './assistant';\n\nexport const App: FC = memo(() => {\n    const [appState, dispatch] = useReducer(reducer, {\n        currentTab: 0\n    });\n\n    useEffect(() => {\n        initAssistant(dispatch);\n    }, []);\n\n    const action = (text:any) => () => {\n        console.log(text);\n    }\n\n    const route = () => {\n        switch (appState.currentTab) {\n            case 0:\n                return <Tab1 dispatch={dispatch} />;\n            case 1:\n                return <Tab2 />;\n        }\n    }\n\n    return (\n        <main className=\"app\">\n            <Tabs\n                size='l'\n                view='secondary'\n                stretch={true}\n                pilled={false}\n                scaleOnPress={true}\n                outlined={false}\n                disabled={false}\n            >\n                <TabItem\n                    key={`item0`}\n                    isActive={appState.currentTab === 0}\n                    tabIndex={0}\n                    contentLeft={true}\n                    onClick={() => dispatch({type: 'SELECT', tab: 0})}\n                    onFocus={action(`onFocus item #${0}`)}\n                    onBlur={action(`onBlur item #${0}`)}\n                >\n                    Таб 1\n                </TabItem>\n                <TabItem\n                    key={`item1`}\n                    isActive={appState.currentTab === 1}\n                    tabIndex={1}\n                    contentLeft={true}\n                    onClick={() => dispatch({type: 'SELECT', tab: 1})}\n                    onFocus={action(`onFocus item #${1}`)}\n                    onBlur={action(`onBlur item #${1}`)}\n                >\n                    Таб 2\n                </TabItem>\n            </Tabs>\n            <Container>\n                <Row>\n                    <Col size={4}>\n                        {route()}\n                    </Col>\n                </Row>\n            </Container>\n        </main>\n    );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { darkSber } from '@sberdevices/plasma-tokens/themes'; // Или один из списка: darkEva, darkJoy, lightEva, lightJoy, lightSber\nimport {\n    text, // Цвет текста\n    background, // Цвет подложки\n    gradient, // Градиент\n} from '@sberdevices/plasma-tokens';\n\nconst DocumentStyle = createGlobalStyle`\n    html:root {\n        min-height: 100vh;\n        color: ${text};\n        background-color: ${background};\n        background-image: ${gradient};\n    }\n`;\nconst ThemeStyle = createGlobalStyle(darkSber);\nexport const GlobalStyle = () => (\n    <>\n        <DocumentStyle />\n        <ThemeStyle />\n    </>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { DeviceThemeProvider } from '@sberdevices/plasma-ui/components/Device';\nimport { GlobalStyle } from './GlobalStyle';\n\nReactDOM.render(\n    <DeviceThemeProvider>\n        <GlobalStyle />\n        <App />\n    </DeviceThemeProvider>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}